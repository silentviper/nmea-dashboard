var l=Object.defineProperty;var h=(n,e,s)=>e in n?l(n,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):n[e]=s;var o=(n,e,s)=>h(n,typeof e!="symbol"?e+"":e,s);const a={port:3e3,host:window.location.hostname,protocol:"ws",apiVersion:"v1"};class g{constructor(e={}){o(this,"ws",null);o(this,"reconnectAttempts",0);o(this,"maxReconnectAttempts",5);o(this,"reconnectTimeout",1e3);o(this,"subscriptions",new Set);o(this,"messageHandlers",new Set);o(this,"config");this.config={...a,...e}}get baseUrl(){return`${this.config.protocol==="ws"?"ws":"http"}://${this.config.host}:${this.config.port}/signalk/${this.config.apiVersion}`}get wsUrl(){return`${this.baseUrl}/stream?subscribe=none`}get httpUrl(){return`${this.config.protocol==="ws"?"http":this.config.protocol}://${this.config.host}:${this.config.port}/signalk/${this.config.apiVersion}`}connect(){try{this.ws=new WebSocket(this.wsUrl),this.ws.onopen=()=>{console.log("SignalK WebSocket connected"),this.reconnectAttempts=0,this.resubscribe()},this.ws.onclose=()=>{console.log("SignalK WebSocket closed"),this.handleDisconnect()},this.ws.onerror=e=>{console.error("SignalK WebSocket error:",e),this.handleDisconnect()},this.ws.onmessage=e=>{try{const s=JSON.parse(e.data);this.messageHandlers.forEach(t=>t(s))}catch(s){console.error("Error parsing SignalK WebSocket message:",s)}}}catch(e){console.error("Error creating SignalK WebSocket:",e),this.handleDisconnect()}}handleDisconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const e=this.reconnectTimeout*Math.pow(2,this.reconnectAttempts-1);console.log(`Attempting to reconnect to SignalK in ${e}ms (attempt ${this.reconnectAttempts})`),setTimeout(()=>this.connect(),e)}else console.error("Max reconnection attempts to SignalK reached")}subscribe(e){this.subscriptions.add(e),this.isConnected()&&this.sendSubscription(e)}resubscribe(){var e;if(this.subscriptions.size>0){const s={context:"vessels.self",subscribe:Array.from(this.subscriptions)};(e=this.ws)==null||e.send(JSON.stringify(s))}}sendSubscription(e){var t;const s={context:"vessels.self",subscribe:[e]};(t=this.ws)==null||t.send(JSON.stringify(s))}async put(e,s,t){const i=`${this.httpUrl}/api/vessels/self/${e.replace(/\./g,"/")}`,c={"Content-Type":"application/json"};t&&(c.Authorization=`Bearer ${t}`);try{const r=await fetch(i,{method:"PUT",headers:c,body:JSON.stringify({value:s})});if(!r.ok)throw new Error(`HTTP error! status: ${r.status}`);return await r.json()}catch(r){throw console.error("Error making SignalK PUT request:",r),r}}addMessageHandler(e){this.messageHandlers.add(e)}removeMessageHandler(e){this.messageHandlers.delete(e)}isConnected(){var e;return((e=this.ws)==null?void 0:e.readyState)===WebSocket.OPEN}disconnect(){var e;(e=this.ws)==null||e.close(),this.ws=null,this.subscriptions.clear(),this.messageHandlers.clear()}}function p(n={}){const e=new g({...a,...n});return{connect:()=>e.connect(),disconnect:()=>e.disconnect(),subscribe:s=>e.subscribe(s),addMessageHandler:s=>e.addMessageHandler(s),removeMessageHandler:s=>e.removeMessageHandler(s),isConnected:()=>e.isConnected(),put:(s,t,i)=>e.put(s,t,i)}}export{p as u};
//# sourceMappingURL=useSignalk-Bw-wFA2A.js.map
