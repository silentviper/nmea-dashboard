var o=Object.defineProperty;var r=(t,e,s)=>e in t?o(t,e,{enumerable:!0,configurable:!0,writable:!0,value:s}):t[e]=s;var n=(t,e,s)=>r(t,typeof e!="symbol"?e+"":e,s);class i{constructor(e){n(this,"ws",null);n(this,"reconnectAttempts",0);n(this,"maxReconnectAttempts",5);n(this,"reconnectTimeout",1e3);n(this,"subscriptions",new Set);n(this,"messageHandlers",new Set);this.baseUrl=e}connect(){try{this.ws=new WebSocket(`ws://${this.baseUrl}/signalk/v1/stream?subscribe=none`),this.ws.onopen=()=>{console.log("WebSocket connected"),this.reconnectAttempts=0,this.resubscribe()},this.ws.onclose=()=>{console.log("WebSocket closed"),this.handleDisconnect()},this.ws.onerror=e=>{console.error("WebSocket error:",e),this.handleDisconnect()},this.ws.onmessage=e=>{try{const s=JSON.parse(e.data);this.messageHandlers.forEach(c=>c(s))}catch(s){console.error("Error parsing WebSocket message:",s)}}}catch(e){console.error("Error creating WebSocket:",e),this.handleDisconnect()}}handleDisconnect(){if(this.reconnectAttempts<this.maxReconnectAttempts){this.reconnectAttempts++;const e=this.reconnectTimeout*Math.pow(2,this.reconnectAttempts-1);console.log(`Attempting to reconnect in ${e}ms (attempt ${this.reconnectAttempts})`),setTimeout(()=>this.connect(),e)}else console.error("Max reconnection attempts reached")}subscribe(e){this.subscriptions.add(e),this.isConnected()&&this.sendSubscription(e)}resubscribe(){var e;if(this.subscriptions.size>0){const s={context:"vessels.self",subscribe:Array.from(this.subscriptions)};(e=this.ws)==null||e.send(JSON.stringify(s))}}sendSubscription(e){var c;const s={context:"vessels.self",subscribe:[e]};(c=this.ws)==null||c.send(JSON.stringify(s))}addMessageHandler(e){this.messageHandlers.add(e)}removeMessageHandler(e){this.messageHandlers.delete(e)}isConnected(){var e;return((e=this.ws)==null?void 0:e.readyState)===WebSocket.OPEN}disconnect(){var e;(e=this.ws)==null||e.close(),this.ws=null,this.subscriptions.clear(),this.messageHandlers.clear()}}function l(t=window.location.host){const e=new i(t);return{connect:()=>e.connect(),disconnect:()=>e.disconnect(),subscribe:s=>e.subscribe(s),addMessageHandler:s=>e.addMessageHandler(s),removeMessageHandler:s=>e.removeMessageHandler(s),isConnected:()=>e.isConnected()}}export{l as u};
//# sourceMappingURL=useSignalk-DpnTJwyw.js.map
